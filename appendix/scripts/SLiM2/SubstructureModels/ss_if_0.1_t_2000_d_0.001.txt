initialize() {
    initializeMutationRate(1e-8);
	// m1 simulates neutral alleles
    initializeMutationType("m1", 0.5, "f", 0.0);
	// m2 simulates the beneficial allele in p1
    initializeMutationType("m2", 0.5, "f", 0.003);
	// m3 simulates the beneficial allele in p2
    initializeMutationType("m3", 0.5, "f", 0.001);
    m1.mutationStackPolicy = "f";
    m2.mutationStackPolicy = "f";
    m3.mutationStackPolicy = "f";
    initializeGenomicElementType("g1", m1, 1.0);
    initializeGenomicElement(g1, 0, 999999);
    initializeRecombinationRate(1e-8);
}

1 {
    sim.addSubpop("p1", 10000);
    sim.addSubpop("p2", 10000);
}

1 late() {
    // Add beneficial mutation for estimating selection difference
    targets = sample(p1.genomes, 2000);
    targets.addNewDrawnMutation(m2, 499999);
    targets = sample(p2.genomes, 2000);
    targets.addNewDrawnMutation(m3, 499999);
}

1000 late() {
	// p1 divides into two subpopulations: p1 and p3
    sim.addSubpopSplit("p3", 5000, p1);
	// p2 divides into two subpopulations: p2 and p4
    sim.addSubpopSplit("p4", 5000, p2);
    p1.setSubpopulationSize(5000);
    p2.setSubpopulationSize(5000);
}

// the beneficial allele in p3 returns to neutral
1001:2000 fitness(m2, p3) { return 1.0; }
// the beneficial allele in p4 returns to neutral
1001:2000 fitness(m3, p4) { return 1.0; }

2000 late() {
    mut1 = sim.mutationsOfType(m2);
    mut2 = sim.mutationsOfType(m3);
    cat("Result:\t" + sim.mutationFrequencies(p1, mut1)
        + "\t" + sim.mutationFrequencies(p3, mut1) 
        + "\t" + sim.mutationFrequencies(p2, mut2)
        + "\t" + sim.mutationFrequencies(p4, mut2) + "\n");
    sim.simulationFinished();
}
